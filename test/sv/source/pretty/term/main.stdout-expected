-- names
variable
%symbol
#primitive
@macro
?nominal

-- parens
var
%sym
@mac
@mac

-- application
one two
one two three
one two three four
one two three
one (two three)

-- abstractions
{} body
{a} body
{a b} body
{~a} body
{~a ~b} body
{~a ~b} body
{~a ~b} body
{~one two ~three ~four five} body
{} {} body
{one} {~two three} body
{one} {~two three} body
({one} two three) four
{one} two (three four)
{one} two three four

-- argument lists
[]
[one]
[one, two]
[[one], [two, three]]
[[one], [two, three], four]
{a b} [[one], [two, three], four]
[[one], [two, three], four, [five, six]]
-- sugar
[a, b, c]
f [x1, x2, g [x3, x4, h [x5]]]
f [x1, x2, g [x3, x4, h [x5]]]
f [x1, x2, g [x3, x4, h [x5]]]

-- let bindings
!let {x} = one two !in three x
!let {x} = one two !in three x
!let {x y z} = one !in two [x, y, z]
!let {x} = !let {y} = one !in two !in y [one]
-- sugar
!let {x} = one !in !let {y} = two !in [x, y]

-- rec bindings
!rec f = f one !in f two
!rec f = f one !and g = f two !and h = f (g three) !in f two

-- box
!box one
!box []
!box {one} two three
one (!box two three)

-- run
!run one
!run []
!run {one} two three
one (!run two three)

